#!/usr/bin/env python3
# -*- coding: utf-8 -*-
###############################################################################
#
# Copyright Lars Hagstr√∂m, 2015 (lars@foldspace.nu)
#
###############################################################################
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
###############################################################################

from __future__ import print_function
import sys, subprocess, re
from PyQt5 import QtWidgets
from PyQt5 import QtGui
from PyQt5 import QtCore
from threading import Thread
from queue import Queue, Empty

def enqueue_output(out, queue):
    pattern = re.compile(r"^ *[0-9]+\. (.*) \(([0-9\.]+)\)")
    while True:
        line = out.readline()
        if not line:
            break
        match = pattern.match(line)
        if match is not None:
            queue.put((match.group(1),match.group(2)))
    out.close()

def sendmessage(title, message):
    subprocess.call(("notify-send", title, message, "--icon=info"))

class SystemTrayIcon(QtWidgets.QSystemTrayIcon):

    def __init__(self, icon, parent=None):
        QtWidgets.QSystemTrayIcon.__init__(self, icon, parent)
        self.activated.connect(self.update)
        self.menu = QtWidgets.QMenu(parent)
        self.toggleServiceAction = self.menu.addAction("Restart Streaming Service")
        self.toggleServiceAction.triggered.connect(self.toggleService)

        self.deviceMenu = self.menu.addMenu("Stream to")

        self.menu.addSeparator()
        self.menu.addAction("Exit").triggered.connect(self.exit)
        self.setContextMenu(self.menu)

        self.scanProc = None
        self.devices = set()

    def update(self):
        running = False
        output = subprocess.check_output(("systemctl","--user","show","airtame-streamer.service"))
        if output.find(b"ActiveState=active") != -1:
            self.toggleServiceAction.setText("Stop Streaming Service")
            running = True
        elif output.find(b"ActiveState=inactive") != -1:
            self.toggleServiceAction.setText("Start Streaming Service")
        else:
            self.toggleServiceAction.setText("Restart Streaming Service")

        self.deviceMenu.setEnabled(running and len(self.devices) > 0)

        if running:
            self.deviceMenu.clear()
            for (name,addr) in self.devices:
                action = self.deviceMenu.addAction("Stream to " + name)
                action.triggered.connect(lambda: self.stream(name))

    def startScan(self):
        if self.scanProc is None:
            self.scanProc = subprocess.Popen(("stdbuf", "-oL", "airtame-tray-cli", "-s"),
                                             stdout=subprocess.PIPE,
                                             stderr=subprocess.STDOUT,
                                             universal_newlines = True)
            self.scanQueue = Queue()
            thread = Thread(target=enqueue_output,args=(self.scanProc.stdout, self.scanQueue))
            thread.daemon = True
            thread.start()
            self.scanTimer = QtCore.QTimer()
            self.scanTimer.timeout.connect(self.collectScanResults)
            self.scanTimer.start(2000)

    def stopScan(self):
        if self.scanProc is not None:
            self.scanProc.kill()
            self.scanProc = None
            self.scanTimer.stop()
            self.scanTimer = None

    def collectScanResults(self):
        while not self.scanQueue.empty():
            res = self.scanQueue.get_nowait()
            if res not in self.devices:
                self.devices.add(res)
                self.update()
                sendmessage("Airtame detected", "Name: " + res[0] + "\nAddress: " + res[1])

    def exit(self):
        print("Exiting")
        subprocess.call(("systemctl","--user","stop","airtame-streamer.service"))
        self.stopScan()
        QtWidgets.QApplication.quit()

    def toggleService(self):
        print (self.toggleServiceAction.text())
        if self.toggleServiceAction.text() == "Start Streaming Service":
            subprocess.call(("systemctl","--user","start","airtame-streamer.service"))
            self.startScan()
        elif self.toggleServiceAction.text() == "Stop Streaming Service":
            subprocess.call(("systemctl","--user","stop","airtame-streamer.service"))
            self.stopScan()
        elif self.toggleServiceAction.text() == "Restart Streaming Service":
            subprocess.call(("systemctl","--user","restart","airtame-streamer.service"))
            self.startScan()
        else:
            print("wut?")

    def stream(self, name):
        xrandr_output = subprocess.check_output(("xrandr")).decode("utf-8")
        if xrandr_output.count(" connected"):
            sendmessage("NO!", "More than one screen connected, will not start streaming")
            return
        subprocess.call(("airtame-tray-cli", "-m", "0", "-f", "30", "-q", "3", "-c", name))

def main():
    app = QtWidgets.QApplication(sys.argv)

    w = QtWidgets.QWidget()
    trayIcon = SystemTrayIcon(QtGui.QIcon("/opt/airtame/logo.png"), w)

    trayIcon.show()
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()
